/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
  import { Listener, Provider } from "@ethersproject/providers";
  import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
  
  export interface BridgeInterface extends utils.Interface {
    contractName: "ChainBridge";
    functions: {
      "addGovernor(address)": FunctionFragment;
      "addLiquidity(address,uint256)": FunctionFragment;
      "addNativeLiquidity(uint256)": FunctionFragment;
      "addPauser(address)": FunctionFragment;
      "addseq()": FunctionFragment;
      "delayPeriod()": FunctionFragment;
      "delayThresholds(address)": FunctionFragment;
      "delayedTransfers(bytes32)": FunctionFragment;
      "epochLength()": FunctionFragment;
      "epochVolumeCaps(address)": FunctionFragment;
      "epochVolumes(address)": FunctionFragment;
      "executeDelayedTransfer(bytes32)": FunctionFragment;
      "governors(address)": FunctionFragment;
      "increaseNoticePeriod(uint256)": FunctionFragment;
      "isGovernor(address)": FunctionFragment;
      "isPauser(address)": FunctionFragment;
      "lastOpTimestamps(address)": FunctionFragment;
      "maxSend(address)": FunctionFragment;
      "minAdd(address)": FunctionFragment;
      "minSend(address)": FunctionFragment;
      "minimalMaxSlippage()": FunctionFragment;
      "nativeWrap()": FunctionFragment;
      "noticePeriod()": FunctionFragment;
      "notifyResetSigners()": FunctionFragment;
      "owner()": FunctionFragment;
      "pause()": FunctionFragment;
      "paused()": FunctionFragment;
      "pausers(address)": FunctionFragment;
      "relay(bytes,bytes[],address[],uint256[])": FunctionFragment;
      "removeGovernor(address)": FunctionFragment;
      "removePauser(address)": FunctionFragment;
      "renounceGovernor()": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "renouncePauser()": FunctionFragment;
      "resetSigners(address[],uint256[])": FunctionFragment;
      "resetTime()": FunctionFragment;
      "send(address,address,uint256,uint64,uint64,uint32)": FunctionFragment;
      "sendNative(address,uint256,uint64,uint64,uint32)": FunctionFragment;
      "setDelayPeriod(uint256)": FunctionFragment;
      "setDelayThresholds(address[],uint256[])": FunctionFragment;
      "setEpochLength(uint256)": FunctionFragment;
      "setEpochVolumeCaps(address[],uint256[])": FunctionFragment;
      "setMaxSend(address[],uint256[])": FunctionFragment;
      "setMinAdd(address[],uint256[])": FunctionFragment;
      "setMinSend(address[],uint256[])": FunctionFragment;
      "setMinimalMaxSlippage(uint32)": FunctionFragment;
      "setWrap(address)": FunctionFragment;
      "ssHash()": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
      "transfers(bytes32)": FunctionFragment;
      "triggerTime()": FunctionFragment;
      "unpause()": FunctionFragment;
      "updateSigners(uint256,address[],uint256[],bytes[],address[],uint256[])": FunctionFragment;
      "verifySigs(bytes,bytes[],address[],uint256[])": FunctionFragment;
      "withdraw(bytes,bytes[],address[],uint256[])": FunctionFragment;
      "withdraws(bytes32)": FunctionFragment;
    };
  
    encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
    encodeFunctionData(functionFragment: "addLiquidity", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "addNativeLiquidity", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
    encodeFunctionData(functionFragment: "addseq", values?: undefined): string;
    encodeFunctionData(functionFragment: "delayPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "delayThresholds", values: [string]): string;
    encodeFunctionData(functionFragment: "delayedTransfers", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "epochLength", values?: undefined): string;
    encodeFunctionData(functionFragment: "epochVolumeCaps", values: [string]): string;
    encodeFunctionData(functionFragment: "epochVolumes", values: [string]): string;
    encodeFunctionData(functionFragment: "executeDelayedTransfer", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "governors", values: [string]): string;
    encodeFunctionData(functionFragment: "increaseNoticePeriod", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
    encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
    encodeFunctionData(functionFragment: "lastOpTimestamps", values: [string]): string;
    encodeFunctionData(functionFragment: "maxSend", values: [string]): string;
    encodeFunctionData(functionFragment: "minAdd", values: [string]): string;
    encodeFunctionData(functionFragment: "minSend", values: [string]): string;
    encodeFunctionData(functionFragment: "minimalMaxSlippage", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeWrap", values?: undefined): string;
    encodeFunctionData(functionFragment: "noticePeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "notifyResetSigners", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "pausers", values: [string]): string;
    encodeFunctionData(functionFragment: "relay", values: [BytesLike, BytesLike[], string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "removeGovernor", values: [string]): string;
    encodeFunctionData(functionFragment: "removePauser", values: [string]): string;
    encodeFunctionData(functionFragment: "renounceGovernor", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "renouncePauser", values?: undefined): string;
    encodeFunctionData(functionFragment: "resetSigners", values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "resetTime", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "send",
      values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(
      functionFragment: "sendNative",
      values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(functionFragment: "setDelayPeriod", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDelayThresholds", values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setEpochLength", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setEpochVolumeCaps", values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setMaxSend", values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setMinAdd", values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setMinSend", values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setMinimalMaxSlippage", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setWrap", values: [string]): string;
    encodeFunctionData(functionFragment: "ssHash", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "transfers", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "triggerTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "updateSigners",
      values: [BigNumberish, string[], BigNumberish[], BytesLike[], string[], BigNumberish[]],
    ): string;
    encodeFunctionData(
      functionFragment: "verifySigs",
      values: [BytesLike, BytesLike[], string[], BigNumberish[]],
    ): string;
    encodeFunctionData(functionFragment: "withdraw", values: [BytesLike, BytesLike[], string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "withdraws", values: [BytesLike]): string;
  
    decodeFunctionResult(functionFragment: "addGovernor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addLiquidity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addNativeLiquidity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addseq", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delayPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delayThresholds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delayedTransfers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "epochLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "epochVolumeCaps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "epochVolumes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeDelayedTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "governors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseNoticePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastOpTimestamps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minAdd", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimalMaxSlippage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeWrap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "noticePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "notifyResetSigners", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeGovernor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removePauser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceGovernor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renouncePauser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetSigners", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelayPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelayThresholds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEpochLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEpochVolumeCaps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinAdd", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinimalMaxSlippage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWrap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ssHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "triggerTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSigners", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraws", data: BytesLike): Result;
  
    events: {
      "DelayPeriodUpdated(uint256)": EventFragment;
      "DelayThresholdUpdated(address,uint256)": EventFragment;
      "DelayedTransferAdded(bytes32)": EventFragment;
      "DelayedTransferExecuted(bytes32,address,address,uint256)": EventFragment;
      "EpochLengthUpdated(uint256)": EventFragment;
      "EpochVolumeUpdated(address,uint256)": EventFragment;
      "GovernorAdded(address)": EventFragment;
      "GovernorRemoved(address)": EventFragment;
      "LiquidityAdded(uint64,address,address,uint256)": EventFragment;
      "MaxSendUpdated(address,uint256)": EventFragment;
      "MinAddUpdated(address,uint256)": EventFragment;
      "MinSendUpdated(address,uint256)": EventFragment;
      "OwnershipTransferred(address,address)": EventFragment;
      "Paused(address)": EventFragment;
      "PauserAdded(address)": EventFragment;
      "PauserRemoved(address)": EventFragment;
      "Relay(bytes32,address,address,address,uint256,uint64,bytes32)": EventFragment;
      "ResetNotification(uint256)": EventFragment;
      "Send(bytes32,address,address,address,uint256,uint64,uint64,uint32)": EventFragment;
      "SignersUpdated(address[],uint256[])": EventFragment;
      "Unpaused(address)": EventFragment;
      "WithdrawDone(bytes32,uint64,address,address,uint256,bytes32)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "DelayPeriodUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DelayThresholdUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DelayedTransferAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DelayedTransferExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EpochLengthUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EpochVolumeUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GovernorAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GovernorRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MaxSendUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MinAddUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MinSendUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Relay"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ResetNotification"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Send"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SignersUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawDone"): EventFragment;
  }
  
  export type DelayPeriodUpdatedEvent = TypedEvent<[BigNumber], { period: BigNumber }>;
  
  export type DelayPeriodUpdatedEventFilter = TypedEventFilter<DelayPeriodUpdatedEvent>;
  
  export type DelayThresholdUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; threshold: BigNumber }>;
  
  export type DelayThresholdUpdatedEventFilter = TypedEventFilter<DelayThresholdUpdatedEvent>;
  
  export type DelayedTransferAddedEvent = TypedEvent<[string], { id: string }>;
  
  export type DelayedTransferAddedEventFilter = TypedEventFilter<DelayedTransferAddedEvent>;
  
  export type DelayedTransferExecutedEvent = TypedEvent<
    [string, string, string, BigNumber],
    { id: string; receiver: string; token: string; amount: BigNumber }
  >;
  
  export type DelayedTransferExecutedEventFilter = TypedEventFilter<DelayedTransferExecutedEvent>;
  
  export type EpochLengthUpdatedEvent = TypedEvent<[BigNumber], { length: BigNumber }>;
  
  export type EpochLengthUpdatedEventFilter = TypedEventFilter<EpochLengthUpdatedEvent>;
  
  export type EpochVolumeUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; cap: BigNumber }>;
  
  export type EpochVolumeUpdatedEventFilter = TypedEventFilter<EpochVolumeUpdatedEvent>;
  
  export type GovernorAddedEvent = TypedEvent<[string], { account: string }>;
  
  export type GovernorAddedEventFilter = TypedEventFilter<GovernorAddedEvent>;
  
  export type GovernorRemovedEvent = TypedEvent<[string], { account: string }>;
  
  export type GovernorRemovedEventFilter = TypedEventFilter<GovernorRemovedEvent>;
  
  export type LiquidityAddedEvent = TypedEvent<
    [BigNumber, string, string, BigNumber],
    { seqnum: BigNumber; provider: string; token: string; amount: BigNumber }
  >;
  
  export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;
  
  export type MaxSendUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; amount: BigNumber }>;
  
  export type MaxSendUpdatedEventFilter = TypedEventFilter<MaxSendUpdatedEvent>;
  
  export type MinAddUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; amount: BigNumber }>;
  
  export type MinAddUpdatedEventFilter = TypedEventFilter<MinAddUpdatedEvent>;
  
  export type MinSendUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; amount: BigNumber }>;
  
  export type MinSendUpdatedEventFilter = TypedEventFilter<MinSendUpdatedEvent>;
  
  export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;
  
  export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
  
  export type PausedEvent = TypedEvent<[string], { account: string }>;
  
  export type PausedEventFilter = TypedEventFilter<PausedEvent>;
  
  export type PauserAddedEvent = TypedEvent<[string], { account: string }>;
  
  export type PauserAddedEventFilter = TypedEventFilter<PauserAddedEvent>;
  
  export type PauserRemovedEvent = TypedEvent<[string], { account: string }>;
  
  export type PauserRemovedEventFilter = TypedEventFilter<PauserRemovedEvent>;
  
  export type RelayEvent = TypedEvent<
    [string, string, string, string, BigNumber, BigNumber, string],
    {
      transferId: string;
      sender: string;
      receiver: string;
      token: string;
      amount: BigNumber;
      srcChainId: BigNumber;
      srcTransferId: string;
    }
  >;
  
  export type RelayEventFilter = TypedEventFilter<RelayEvent>;
  
  export type ResetNotificationEvent = TypedEvent<[BigNumber], { resetTime: BigNumber }>;
  
  export type ResetNotificationEventFilter = TypedEventFilter<ResetNotificationEvent>;
  
  export type SendEvent = TypedEvent<
    [string, string, string, string, BigNumber, BigNumber, BigNumber, number],
    {
      transferId: string;
      sender: string;
      receiver: string;
      token: string;
      amount: BigNumber;
      dstChainId: BigNumber;
      nonce: BigNumber;
      maxSlippage: number;
    }
  >;
  
  export type SendEventFilter = TypedEventFilter<SendEvent>;
  
  export type SignersUpdatedEvent = TypedEvent<[string[], BigNumber[]], { _signers: string[]; _powers: BigNumber[] }>;
  
  export type SignersUpdatedEventFilter = TypedEventFilter<SignersUpdatedEvent>;
  
  export type UnpausedEvent = TypedEvent<[string], { account: string }>;
  
  export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;
  
  export type WithdrawDoneEvent = TypedEvent<
    [string, BigNumber, string, string, BigNumber, string],
    {
      withdrawId: string;
      seqnum: BigNumber;
      receiver: string;
      token: string;
      amount: BigNumber;
      refid: string;
    }
  >;
  
  export type WithdrawDoneEventFilter = TypedEventFilter<WithdrawDoneEvent>;
  
  export interface ChainBridge extends BaseContract {
    contractName: "ChainBridge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: BridgeInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      deposit(
        _destChainId: BigNumberish,
        _resouceId: BigNumberish,
        _data: BytesLike
      ): Promise<ContractTransaction>;
    };
  
    deposit(
        _destChainId: BigNumberish,
        _resouceId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
      ): Promise<ContractTransaction>;
      
  
    //   withdraw(
    //     _wdmsg: BytesLike,
    //     _sigs: BytesLike[],
    //     _signers: string[],
    //     _powers: BigNumberish[],
    //     overrides?: Overrides & { from?: string | Promise<string> },
    //   ): Promise<PopulatedTransaction>;
  
    //   withdraws(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
  