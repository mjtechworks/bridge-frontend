/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MessageBusSenderInterface extends utils.Interface {
  contractName: "MessageBusSender";
  functions: {
    "calcFee(bytes)": FunctionFragment;
    "feeBase()": FunctionFragment;
    "feePerByte()": FunctionFragment;
    "owner()": FunctionFragment;
    "sendMessage(address,uint256,bytes)": FunctionFragment;
    "sendMessageWithTransfer(address,uint256,address,bytes32,bytes)": FunctionFragment;
    "setFeeBase(uint256)": FunctionFragment;
    "setFeePerByte(uint256)": FunctionFragment;
    "sigsVerifier()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFee(address,uint256,bytes[],address[],uint256[])": FunctionFragment;
    "withdrawnFees(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "calcFee", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "feeBase", values?: undefined): string;
  encodeFunctionData(functionFragment: "feePerByte", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "sendMessage", values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(
    functionFragment: "sendMessageWithTransfer",
    values: [string, BigNumberish, string, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "setFeeBase", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setFeePerByte", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "sigsVerifier", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [string, BigNumberish, BytesLike[], string[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: "withdrawnFees", values: [string]): string;

  decodeFunctionResult(functionFragment: "calcFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePerByte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendMessageWithTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeePerByte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sigsVerifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawnFees", data: BytesLike): Result;

  events: {
    "FeeBaseUpdated(uint256)": EventFragment;
    "FeePerByteUpdated(uint256)": EventFragment;
    "Message(address,address,uint256,bytes,uint256)": EventFragment;
    "MessageWithTransfer(address,address,uint256,address,bytes32,bytes,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeBaseUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePerByteUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Message"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageWithTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type FeeBaseUpdatedEvent = TypedEvent<[BigNumber], { feeBase: BigNumber }>;

export type FeeBaseUpdatedEventFilter = TypedEventFilter<FeeBaseUpdatedEvent>;

export type FeePerByteUpdatedEvent = TypedEvent<[BigNumber], { feePerByte: BigNumber }>;

export type FeePerByteUpdatedEventFilter = TypedEventFilter<FeePerByteUpdatedEvent>;

export type MessageEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  {
    sender: string;
    receiver: string;
    dstChainId: BigNumber;
    message: string;
    fee: BigNumber;
  }
>;

export type MessageEventFilter = TypedEventFilter<MessageEvent>;

export type MessageWithTransferEvent = TypedEvent<
  [string, string, BigNumber, string, string, string, BigNumber],
  {
    sender: string;
    receiver: string;
    dstChainId: BigNumber;
    bridge: string;
    srcTransferId: string;
    message: string;
    fee: BigNumber;
  }
>;

export type MessageWithTransferEventFilter = TypedEventFilter<MessageWithTransferEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface MessageBusSender extends BaseContract {
  contractName: "MessageBusSender";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MessageBusSenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    feeBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePerByte(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _srcBridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sigsVerifier(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  feeBase(overrides?: CallOverrides): Promise<BigNumber>;

  feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  sendMessage(
    _receiver: string,
    _dstChainId: BigNumberish,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sendMessageWithTransfer(
    _receiver: string,
    _dstChainId: BigNumberish,
    _srcBridge: string,
    _srcTransferId: BytesLike,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeBase(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeePerByte(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sigsVerifier(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawFee(
    _account: string,
    _cumulativeFee: BigNumberish,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _srcBridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeBase(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeePerByte(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sigsVerifier(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "FeeBaseUpdated(uint256)"(feeBase?: null): FeeBaseUpdatedEventFilter;
    FeeBaseUpdated(feeBase?: null): FeeBaseUpdatedEventFilter;

    "FeePerByteUpdated(uint256)"(feePerByte?: null): FeePerByteUpdatedEventFilter;
    FeePerByteUpdated(feePerByte?: null): FeePerByteUpdatedEventFilter;

    "Message(address,address,uint256,bytes,uint256)"(
      sender?: string | null,
      receiver?: null,
      dstChainId?: null,
      message?: null,
      fee?: null,
    ): MessageEventFilter;
    Message(sender?: string | null, receiver?: null, dstChainId?: null, message?: null, fee?: null): MessageEventFilter;

    "MessageWithTransfer(address,address,uint256,address,bytes32,bytes,uint256)"(
      sender?: string | null,
      receiver?: null,
      dstChainId?: null,
      bridge?: null,
      srcTransferId?: null,
      message?: null,
      fee?: null,
    ): MessageWithTransferEventFilter;
    MessageWithTransfer(
      sender?: string | null,
      receiver?: null,
      dstChainId?: null,
      bridge?: null,
      srcTransferId?: null,
      message?: null,
      fee?: null,
    ): MessageWithTransferEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _srcBridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeBase(_fee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setFeePerByte(_fee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    sigsVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePerByte(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _srcBridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sigsVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
