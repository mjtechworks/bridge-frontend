/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FreezableInterface extends utils.Interface {
  contractName: "Freezable";
  functions: {
    "isFrozen(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isFrozen", values: [string]): string;

  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;

  events: {
    "Frozen(address)": EventFragment;
    "Unfrozen(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Frozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfrozen"): EventFragment;
}

export type FrozenEvent = TypedEvent<[string], { account: string }>;

export type FrozenEventFilter = TypedEventFilter<FrozenEvent>;

export type UnfrozenEvent = TypedEvent<[string], { account: string }>;

export type UnfrozenEventFilter = TypedEventFilter<UnfrozenEvent>;

export interface Freezable extends BaseContract {
  contractName: "Freezable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FreezableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isFrozen(_account: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  isFrozen(_account: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    isFrozen(_account: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Frozen(address)"(account?: null): FrozenEventFilter;
    Frozen(account?: null): FrozenEventFilter;

    "Unfrozen(address)"(account?: null): UnfrozenEventFilter;
    Unfrozen(account?: null): UnfrozenEventFilter;
  };

  estimateGas: {
    isFrozen(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isFrozen(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
