/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WithdrawInboxInterface extends utils.Interface {
  contractName: "WithdrawInbox";
  functions: {
    "minimalMaxSlippage()": FunctionFragment;
    "owner()": FunctionFragment;
    "setMinimalMaxSlippage(uint32)": FunctionFragment;
    "setValidityPeriod(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validityPeriod()": FunctionFragment;
    "withdraw(uint64,address,uint64,uint64[],address[],uint32[],uint32[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "minimalMaxSlippage", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setMinimalMaxSlippage", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setValidityPeriod", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "validityPeriod", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish, BigNumberish[], string[], BigNumberish[], BigNumberish[]],
  ): string;

  decodeFunctionResult(functionFragment: "minimalMaxSlippage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinimalMaxSlippage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValidityPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validityPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "WithdrawalRequest(uint64,address,address,uint64,uint64[],address[],uint32[],uint32[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalRequest"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type WithdrawalRequestEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber[], string[], number[], number[], BigNumber],
  {
    seqNum: BigNumber;
    sender: string;
    receiver: string;
    toChain: BigNumber;
    fromChains: BigNumber[];
    tokens: string[];
    ratios: number[];
    slippages: number[];
    deadline: BigNumber;
  }
>;

export type WithdrawalRequestEventFilter = TypedEventFilter<WithdrawalRequestEvent>;

export interface WithdrawInbox extends BaseContract {
  contractName: "WithdrawInbox";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WithdrawInboxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    minimalMaxSlippage(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setMinimalMaxSlippage(
      _minimalMaxSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setValidityPeriod(
      _validityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    validityPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _wdSeq: BigNumberish,
      _receiver: string,
      _toChain: BigNumberish,
      _fromChains: BigNumberish[],
      _tokens: string[],
      _ratios: BigNumberish[],
      _slippages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  minimalMaxSlippage(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  setMinimalMaxSlippage(
    _minimalMaxSlippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setValidityPeriod(
    _validityPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  validityPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _wdSeq: BigNumberish,
    _receiver: string,
    _toChain: BigNumberish,
    _fromChains: BigNumberish[],
    _tokens: string[],
    _ratios: BigNumberish[],
    _slippages: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    minimalMaxSlippage(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    setMinimalMaxSlippage(_minimalMaxSlippage: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setValidityPeriod(_validityPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    validityPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _wdSeq: BigNumberish,
      _receiver: string,
      _toChain: BigNumberish,
      _fromChains: BigNumberish[],
      _tokens: string[],
      _ratios: BigNumberish[],
      _slippages: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    "WithdrawalRequest(uint64,address,address,uint64,uint64[],address[],uint32[],uint32[],uint256)"(
      seqNum?: null,
      sender?: null,
      receiver?: null,
      toChain?: null,
      fromChains?: null,
      tokens?: null,
      ratios?: null,
      slippages?: null,
      deadline?: null,
    ): WithdrawalRequestEventFilter;
    WithdrawalRequest(
      seqNum?: null,
      sender?: null,
      receiver?: null,
      toChain?: null,
      fromChains?: null,
      tokens?: null,
      ratios?: null,
      slippages?: null,
      deadline?: null,
    ): WithdrawalRequestEventFilter;
  };

  estimateGas: {
    minimalMaxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimalMaxSlippage(
      _minimalMaxSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setValidityPeriod(
      _validityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    validityPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _wdSeq: BigNumberish,
      _receiver: string,
      _toChain: BigNumberish,
      _fromChains: BigNumberish[],
      _tokens: string[],
      _ratios: BigNumberish[],
      _slippages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    minimalMaxSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinimalMaxSlippage(
      _minimalMaxSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setValidityPeriod(
      _validityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    validityPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _wdSeq: BigNumberish,
      _receiver: string,
      _toChain: BigNumberish,
      _fromChains: BigNumberish[],
      _tokens: string[],
      _ratios: BigNumberish[],
      _slippages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
