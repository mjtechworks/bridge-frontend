/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DelayedTransferInterface extends utils.Interface {
  contractName: "DelayedTransfer";
  functions: {
    "addGovernor(address)": FunctionFragment;
    "delayPeriod()": FunctionFragment;
    "delayThresholds(address)": FunctionFragment;
    "delayedTransfers(bytes32)": FunctionFragment;
    "governors(address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeGovernor(address)": FunctionFragment;
    "renounceGovernor()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDelayPeriod(uint256)": FunctionFragment;
    "setDelayThresholds(address[],uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "delayPeriod", values?: undefined): string;
  encodeFunctionData(functionFragment: "delayThresholds", values: [string]): string;
  encodeFunctionData(functionFragment: "delayedTransfers", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "governors", values: [string]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "renounceGovernor", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "setDelayPeriod", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setDelayThresholds", values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;

  decodeFunctionResult(functionFragment: "addGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delayPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delayThresholds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delayedTransfers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDelayPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDelayThresholds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

  events: {
    "DelayPeriodUpdated(uint256)": EventFragment;
    "DelayThresholdUpdated(address,uint256)": EventFragment;
    "DelayedTransferAdded(bytes32)": EventFragment;
    "DelayedTransferExecuted(bytes32,address,address,uint256)": EventFragment;
    "GovernorAdded(address)": EventFragment;
    "GovernorRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelayPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayedTransferAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayedTransferExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DelayPeriodUpdatedEvent = TypedEvent<[BigNumber], { period: BigNumber }>;

export type DelayPeriodUpdatedEventFilter = TypedEventFilter<DelayPeriodUpdatedEvent>;

export type DelayThresholdUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; threshold: BigNumber }>;

export type DelayThresholdUpdatedEventFilter = TypedEventFilter<DelayThresholdUpdatedEvent>;

export type DelayedTransferAddedEvent = TypedEvent<[string], { id: string }>;

export type DelayedTransferAddedEventFilter = TypedEventFilter<DelayedTransferAddedEvent>;

export type DelayedTransferExecutedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { id: string; receiver: string; token: string; amount: BigNumber }
>;

export type DelayedTransferExecutedEventFilter = TypedEventFilter<DelayedTransferExecutedEvent>;

export type GovernorAddedEvent = TypedEvent<[string], { account: string }>;

export type GovernorAddedEventFilter = TypedEventFilter<GovernorAddedEvent>;

export type GovernorRemovedEvent = TypedEvent<[string], { account: string }>;

export type GovernorRemovedEventFilter = TypedEventFilter<GovernorRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface DelayedTransfer extends BaseContract {
  contractName: "DelayedTransfer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DelayedTransferInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delayPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayThresholds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    delayedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        receiver: string;
        token: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    governors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  addGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  delayThresholds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  delayedTransfers(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      receiver: string;
      token: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setDelayPeriod(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDelayThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delayThresholds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delayedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        receiver: string;
        token: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    renounceGovernor(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDelayPeriod(_period: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDelayThresholds(_tokens: string[], _thresholds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DelayPeriodUpdated(uint256)"(period?: null): DelayPeriodUpdatedEventFilter;
    DelayPeriodUpdated(period?: null): DelayPeriodUpdatedEventFilter;

    "DelayThresholdUpdated(address,uint256)"(token?: null, threshold?: null): DelayThresholdUpdatedEventFilter;
    DelayThresholdUpdated(token?: null, threshold?: null): DelayThresholdUpdatedEventFilter;

    "DelayedTransferAdded(bytes32)"(id?: null): DelayedTransferAddedEventFilter;
    DelayedTransferAdded(id?: null): DelayedTransferAddedEventFilter;

    "DelayedTransferExecuted(bytes32,address,address,uint256)"(
      id?: null,
      receiver?: null,
      token?: null,
      amount?: null,
    ): DelayedTransferExecutedEventFilter;
    DelayedTransferExecuted(
      id?: null,
      receiver?: null,
      token?: null,
      amount?: null,
    ): DelayedTransferExecutedEventFilter;

    "GovernorAdded(address)"(account?: null): GovernorAddedEventFilter;
    GovernorAdded(account?: null): GovernorAddedEventFilter;

    "GovernorRemoved(address)"(account?: null): GovernorRemovedEventFilter;
    GovernorRemoved(account?: null): GovernorRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addGovernor(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delayThresholds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delayedTransfers(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    governors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeGovernor(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delayPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayThresholds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayedTransfers(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governors(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
