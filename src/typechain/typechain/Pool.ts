/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PoolInterface extends utils.Interface {
  contractName: "Pool";
  functions: {
    "addGovernor(address)": FunctionFragment;
    "addLiquidity(address,uint256)": FunctionFragment;
    "addNativeLiquidity(uint256)": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "addseq()": FunctionFragment;
    "delayPeriod()": FunctionFragment;
    "delayThresholds(address)": FunctionFragment;
    "delayedTransfers(bytes32)": FunctionFragment;
    "epochLength()": FunctionFragment;
    "epochVolumeCaps(address)": FunctionFragment;
    "epochVolumes(address)": FunctionFragment;
    "executeDelayedTransfer(bytes32)": FunctionFragment;
    "governors(address)": FunctionFragment;
    "increaseNoticePeriod(uint256)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "lastOpTimestamps(address)": FunctionFragment;
    "minAdd(address)": FunctionFragment;
    "nativeWrap()": FunctionFragment;
    "noticePeriod()": FunctionFragment;
    "notifyResetSigners()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausers(address)": FunctionFragment;
    "removeGovernor(address)": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "renounceGovernor()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "resetSigners(address[],uint256[])": FunctionFragment;
    "resetTime()": FunctionFragment;
    "setDelayPeriod(uint256)": FunctionFragment;
    "setDelayThresholds(address[],uint256[])": FunctionFragment;
    "setEpochLength(uint256)": FunctionFragment;
    "setEpochVolumeCaps(address[],uint256[])": FunctionFragment;
    "setMinAdd(address[],uint256[])": FunctionFragment;
    "setWrap(address)": FunctionFragment;
    "ssHash()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerTime()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateSigners(uint256,address[],uint256[],bytes[],address[],uint256[])": FunctionFragment;
    "verifySigs(bytes,bytes[],address[],uint256[])": FunctionFragment;
    "withdraw(bytes,bytes[],address[],uint256[])": FunctionFragment;
    "withdraws(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "addLiquidity", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "addNativeLiquidity", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "addseq", values?: undefined): string;
  encodeFunctionData(functionFragment: "delayPeriod", values?: undefined): string;
  encodeFunctionData(functionFragment: "delayThresholds", values: [string]): string;
  encodeFunctionData(functionFragment: "delayedTransfers", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "epochLength", values?: undefined): string;
  encodeFunctionData(functionFragment: "epochVolumeCaps", values: [string]): string;
  encodeFunctionData(functionFragment: "epochVolumes", values: [string]): string;
  encodeFunctionData(functionFragment: "executeDelayedTransfer", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "governors", values: [string]): string;
  encodeFunctionData(functionFragment: "increaseNoticePeriod", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "lastOpTimestamps", values: [string]): string;
  encodeFunctionData(functionFragment: "minAdd", values: [string]): string;
  encodeFunctionData(functionFragment: "nativeWrap", values?: undefined): string;
  encodeFunctionData(functionFragment: "noticePeriod", values?: undefined): string;
  encodeFunctionData(functionFragment: "notifyResetSigners", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausers", values: [string]): string;
  encodeFunctionData(functionFragment: "removeGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "removePauser", values: [string]): string;
  encodeFunctionData(functionFragment: "renounceGovernor", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "renouncePauser", values?: undefined): string;
  encodeFunctionData(functionFragment: "resetSigners", values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "resetTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "setDelayPeriod", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setDelayThresholds", values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "setEpochLength", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setEpochVolumeCaps", values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "setMinAdd", values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "setWrap", values: [string]): string;
  encodeFunctionData(functionFragment: "ssHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "triggerTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateSigners",
    values: [BigNumberish, string[], BigNumberish[], BytesLike[], string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "verifySigs",
    values: [BytesLike, BytesLike[], string[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [BytesLike, BytesLike[], string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "withdraws", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "addGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addLiquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addNativeLiquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addseq", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delayPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delayThresholds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delayedTransfers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochVolumeCaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochVolumes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeDelayedTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increaseNoticePeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastOpTimestamps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nativeWrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "noticePeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "notifyResetSigners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removePauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renouncePauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetSigners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDelayPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDelayThresholds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEpochLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEpochVolumeCaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ssHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "triggerTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateSigners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifySigs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraws", data: BytesLike): Result;

  events: {
    "DelayPeriodUpdated(uint256)": EventFragment;
    "DelayThresholdUpdated(address,uint256)": EventFragment;
    "DelayedTransferAdded(bytes32)": EventFragment;
    "DelayedTransferExecuted(bytes32,address,address,uint256)": EventFragment;
    "EpochLengthUpdated(uint256)": EventFragment;
    "EpochVolumeUpdated(address,uint256)": EventFragment;
    "GovernorAdded(address)": EventFragment;
    "GovernorRemoved(address)": EventFragment;
    "LiquidityAdded(uint64,address,address,uint256)": EventFragment;
    "MinAddUpdated(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "ResetNotification(uint256)": EventFragment;
    "SignersUpdated(address[],uint256[])": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawDone(bytes32,uint64,address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelayPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayedTransferAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayedTransferExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochLengthUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochVolumeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinAddUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetNotification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawDone"): EventFragment;
}

export type DelayPeriodUpdatedEvent = TypedEvent<[BigNumber], { period: BigNumber }>;

export type DelayPeriodUpdatedEventFilter = TypedEventFilter<DelayPeriodUpdatedEvent>;

export type DelayThresholdUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; threshold: BigNumber }>;

export type DelayThresholdUpdatedEventFilter = TypedEventFilter<DelayThresholdUpdatedEvent>;

export type DelayedTransferAddedEvent = TypedEvent<[string], { id: string }>;

export type DelayedTransferAddedEventFilter = TypedEventFilter<DelayedTransferAddedEvent>;

export type DelayedTransferExecutedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { id: string; receiver: string; token: string; amount: BigNumber }
>;

export type DelayedTransferExecutedEventFilter = TypedEventFilter<DelayedTransferExecutedEvent>;

export type EpochLengthUpdatedEvent = TypedEvent<[BigNumber], { length: BigNumber }>;

export type EpochLengthUpdatedEventFilter = TypedEventFilter<EpochLengthUpdatedEvent>;

export type EpochVolumeUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; cap: BigNumber }>;

export type EpochVolumeUpdatedEventFilter = TypedEventFilter<EpochVolumeUpdatedEvent>;

export type GovernorAddedEvent = TypedEvent<[string], { account: string }>;

export type GovernorAddedEventFilter = TypedEventFilter<GovernorAddedEvent>;

export type GovernorRemovedEvent = TypedEvent<[string], { account: string }>;

export type GovernorRemovedEventFilter = TypedEventFilter<GovernorRemovedEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { seqnum: BigNumber; provider: string; token: string; amount: BigNumber }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type MinAddUpdatedEvent = TypedEvent<[string, BigNumber], { token: string; amount: BigNumber }>;

export type MinAddUpdatedEventFilter = TypedEventFilter<MinAddUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PauserAddedEvent = TypedEvent<[string], { account: string }>;

export type PauserAddedEventFilter = TypedEventFilter<PauserAddedEvent>;

export type PauserRemovedEvent = TypedEvent<[string], { account: string }>;

export type PauserRemovedEventFilter = TypedEventFilter<PauserRemovedEvent>;

export type ResetNotificationEvent = TypedEvent<[BigNumber], { resetTime: BigNumber }>;

export type ResetNotificationEventFilter = TypedEventFilter<ResetNotificationEvent>;

export type SignersUpdatedEvent = TypedEvent<[string[], BigNumber[]], { _signers: string[]; _powers: BigNumber[] }>;

export type SignersUpdatedEventFilter = TypedEventFilter<SignersUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawDoneEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, string],
  {
    withdrawId: string;
    seqnum: BigNumber;
    receiver: string;
    token: string;
    amount: BigNumber;
    refid: string;
  }
>;

export type WithdrawDoneEventFilter = TypedEventFilter<WithdrawDoneEvent>;

export interface Pool extends BaseContract {
  contractName: "Pool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addNativeLiquidity(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addseq(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayThresholds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    delayedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        receiver: string;
        token: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    epochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochVolumeCaps(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    epochVolumes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    executeDelayedTransfer(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    governors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    increaseNoticePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastOpTimestamps(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minAdd(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    nativeWrap(overrides?: CallOverrides): Promise<[string]>;

    noticePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyResetSigners(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renouncePauser(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    resetTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setEpochLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setEpochVolumeCaps(
      _tokens: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMinAdd(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWrap(_weth: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    ssHash(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    triggerTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    updateSigners(
      _triggerTime: BigNumberish,
      _newSigners: string[],
      _newPowers: BigNumberish[],
      _sigs: BytesLike[],
      _curSigners: string[],
      _curPowers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[void]>;

    withdraw(
      _wdmsg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraws(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addLiquidity(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addNativeLiquidity(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addPauser(account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  addseq(overrides?: CallOverrides): Promise<BigNumber>;

  delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  delayThresholds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  delayedTransfers(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      receiver: string;
      token: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  epochLength(overrides?: CallOverrides): Promise<BigNumber>;

  epochVolumeCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  epochVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  executeDelayedTransfer(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  increaseNoticePeriod(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  lastOpTimestamps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minAdd(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  nativeWrap(overrides?: CallOverrides): Promise<string>;

  noticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  notifyResetSigners(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removeGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removePauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renouncePauser(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  resetSigners(
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  resetTime(overrides?: CallOverrides): Promise<BigNumber>;

  setDelayPeriod(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDelayThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setEpochLength(
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setEpochVolumeCaps(
    _tokens: string[],
    _caps: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMinAdd(
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWrap(_weth: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  ssHash(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  triggerTime(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateSigners(
    _triggerTime: BigNumberish,
    _newSigners: string[],
    _newPowers: BigNumberish[],
    _sigs: BytesLike[],
    _curSigners: string[],
    _curPowers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  verifySigs(
    _msg: BytesLike,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<void>;

  withdraw(
    _wdmsg: BytesLike,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraws(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    addLiquidity(_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addNativeLiquidity(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    addseq(overrides?: CallOverrides): Promise<BigNumber>;

    delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delayThresholds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delayedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        receiver: string;
        token: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    epochVolumeCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    epochVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeDelayedTransfer(id: BytesLike, overrides?: CallOverrides): Promise<void>;

    governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    increaseNoticePeriod(period: BigNumberish, overrides?: CallOverrides): Promise<void>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    lastOpTimestamps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minAdd(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nativeWrap(overrides?: CallOverrides): Promise<string>;

    noticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    notifyResetSigners(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    removeGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    removePauser(account: string, overrides?: CallOverrides): Promise<void>;

    renounceGovernor(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    resetSigners(_signers: string[], _powers: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    resetTime(overrides?: CallOverrides): Promise<BigNumber>;

    setDelayPeriod(_period: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDelayThresholds(_tokens: string[], _thresholds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    setEpochLength(_length: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setEpochVolumeCaps(_tokens: string[], _caps: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    setMinAdd(_tokens: string[], _amounts: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    setWrap(_weth: string, overrides?: CallOverrides): Promise<void>;

    ssHash(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    triggerTime(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateSigners(
      _triggerTime: BigNumberish,
      _newSigners: string[],
      _newPowers: BigNumberish[],
      _sigs: BytesLike[],
      _curSigners: string[],
      _curPowers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(
      _wdmsg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraws(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "DelayPeriodUpdated(uint256)"(period?: null): DelayPeriodUpdatedEventFilter;
    DelayPeriodUpdated(period?: null): DelayPeriodUpdatedEventFilter;

    "DelayThresholdUpdated(address,uint256)"(token?: null, threshold?: null): DelayThresholdUpdatedEventFilter;
    DelayThresholdUpdated(token?: null, threshold?: null): DelayThresholdUpdatedEventFilter;

    "DelayedTransferAdded(bytes32)"(id?: null): DelayedTransferAddedEventFilter;
    DelayedTransferAdded(id?: null): DelayedTransferAddedEventFilter;

    "DelayedTransferExecuted(bytes32,address,address,uint256)"(
      id?: null,
      receiver?: null,
      token?: null,
      amount?: null,
    ): DelayedTransferExecutedEventFilter;
    DelayedTransferExecuted(
      id?: null,
      receiver?: null,
      token?: null,
      amount?: null,
    ): DelayedTransferExecutedEventFilter;

    "EpochLengthUpdated(uint256)"(length?: null): EpochLengthUpdatedEventFilter;
    EpochLengthUpdated(length?: null): EpochLengthUpdatedEventFilter;

    "EpochVolumeUpdated(address,uint256)"(token?: null, cap?: null): EpochVolumeUpdatedEventFilter;
    EpochVolumeUpdated(token?: null, cap?: null): EpochVolumeUpdatedEventFilter;

    "GovernorAdded(address)"(account?: null): GovernorAddedEventFilter;
    GovernorAdded(account?: null): GovernorAddedEventFilter;

    "GovernorRemoved(address)"(account?: null): GovernorRemovedEventFilter;
    GovernorRemoved(account?: null): GovernorRemovedEventFilter;

    "LiquidityAdded(uint64,address,address,uint256)"(
      seqnum?: null,
      provider?: null,
      token?: null,
      amount?: null,
    ): LiquidityAddedEventFilter;
    LiquidityAdded(seqnum?: null, provider?: null, token?: null, amount?: null): LiquidityAddedEventFilter;

    "MinAddUpdated(address,uint256)"(token?: null, amount?: null): MinAddUpdatedEventFilter;
    MinAddUpdated(token?: null, amount?: null): MinAddUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PauserAdded(address)"(account?: null): PauserAddedEventFilter;
    PauserAdded(account?: null): PauserAddedEventFilter;

    "PauserRemoved(address)"(account?: null): PauserRemovedEventFilter;
    PauserRemoved(account?: null): PauserRemovedEventFilter;

    "ResetNotification(uint256)"(resetTime?: null): ResetNotificationEventFilter;
    ResetNotification(resetTime?: null): ResetNotificationEventFilter;

    "SignersUpdated(address[],uint256[])"(_signers?: null, _powers?: null): SignersUpdatedEventFilter;
    SignersUpdated(_signers?: null, _powers?: null): SignersUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawDone(bytes32,uint64,address,address,uint256,bytes32)"(
      withdrawId?: null,
      seqnum?: null,
      receiver?: null,
      token?: null,
      amount?: null,
      refid?: null,
    ): WithdrawDoneEventFilter;
    WithdrawDone(
      withdrawId?: null,
      seqnum?: null,
      receiver?: null,
      token?: null,
      amount?: null,
      refid?: null,
    ): WithdrawDoneEventFilter;
  };

  estimateGas: {
    addGovernor(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addNativeLiquidity(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addPauser(account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addseq(overrides?: CallOverrides): Promise<BigNumber>;

    delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delayThresholds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delayedTransfers(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    epochVolumeCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    epochVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeDelayedTransfer(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    governors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseNoticePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastOpTimestamps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minAdd(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nativeWrap(overrides?: CallOverrides): Promise<BigNumber>;

    noticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    notifyResetSigners(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeGovernor(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removePauser(account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renouncePauser(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    resetTime(overrides?: CallOverrides): Promise<BigNumber>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setEpochLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setEpochVolumeCaps(
      _tokens: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMinAdd(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWrap(_weth: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    ssHash(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    triggerTime(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateSigners(
      _triggerTime: BigNumberish,
      _newSigners: string[],
      _newPowers: BigNumberish[],
      _sigs: BytesLike[],
      _curSigners: string[],
      _curPowers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(
      _wdmsg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraws(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addNativeLiquidity(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addseq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayThresholds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayedTransfers(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochVolumeCaps(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochVolumes(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeDelayedTransfer(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    governors(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseNoticePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPauser(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastOpTimestamps(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAdd(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeWrap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    noticePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyResetSigners(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceGovernor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    renouncePauser(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    resetTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setEpochLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setEpochVolumeCaps(
      _tokens: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMinAdd(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWrap(_weth: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    ssHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    triggerTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    updateSigners(
      _triggerTime: BigNumberish,
      _newSigners: string[],
      _newPowers: BigNumberish[],
      _sigs: BytesLike[],
      _curSigners: string[],
      _curPowers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdraw(
      _wdmsg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraws(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
