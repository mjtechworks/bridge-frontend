/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NFTBridgeInterface extends utils.Interface {
  contractName: "NFTBridge";
  functions: {
    "burn(address,uint256,uint64,address,address,address,bool)": FunctionFragment;
    "claimFee()": FunctionFragment;
    "deposit(address,uint256,uint64,address,address,address)": FunctionFragment;
    "destTxFee(uint64)": FunctionFragment;
    "executeMessage(address,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferRefund(address,uint256,bytes,address)": FunctionFragment;
    "messageBus()": FunctionFragment;
    "owner()": FunctionFragment;
    "setMessageBus(address)": FunctionFragment;
    "setTxFee(uint64,uint256)": FunctionFragment;
    "totalFee(uint64,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish, string, string, string, boolean],
  ): string;
  encodeFunctionData(functionFragment: "claimFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish, string, string, string],
  ): string;
  encodeFunctionData(functionFragment: "destTxFee", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "executeMessage", values: [string, BigNumberish, BytesLike, string]): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransfer",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferFallback",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferRefund",
    values: [string, BigNumberish, BytesLike, string],
  ): string;
  encodeFunctionData(functionFragment: "messageBus", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setMessageBus", values: [string]): string;
  encodeFunctionData(functionFragment: "setTxFee", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "totalFee", values: [BigNumberish, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destTxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeMessageWithTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeMessageWithTransferFallback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeMessageWithTransferRefund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messageBus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMessageBus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

  events: {
    "MessageBusUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Received(address,address,uint256,uint64)": EventFragment;
    "Sent(address,address,uint256,uint64,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageBusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
}

export type MessageBusUpdatedEvent = TypedEvent<[string], { messageBus: string }>;

export type MessageBusUpdatedEventFilter = TypedEventFilter<MessageBusUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type ReceivedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { receiver: string; nft: string; id: BigNumber; srcChid: BigNumber }
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export type SentEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string],
  {
    sender: string;
    srcNft: string;
    id: BigNumber;
    dstChid: BigNumber;
    receiver: string;
    dstNft: string;
  }
>;

export type SentEventFilter = TypedEventFilter<SentEvent>;

export interface NFTBridge extends BaseContract {
  contractName: "NFTBridge";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      _nft: string,
      _id: BigNumberish,
      _dstChid: BigNumberish,
      _receiver: string,
      _dstNft: string,
      _dstBridge: string,
      _backToOrigin: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    deposit(
      _nft: string,
      _id: BigNumberish,
      _dstChid: BigNumberish,
      _receiver: string,
      _dstNft: string,
      _dstBridge: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    destTxFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    executeMessage(
      arg0: string,
      srcChid: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    messageBus(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTxFee(
      chid: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalFee(_dstChid: BigNumberish, _nft: string, _id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  burn(
    _nft: string,
    _id: BigNumberish,
    _dstChid: BigNumberish,
    _receiver: string,
    _dstNft: string,
    _dstBridge: string,
    _backToOrigin: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  deposit(
    _nft: string,
    _id: BigNumberish,
    _dstChid: BigNumberish,
    _receiver: string,
    _dstNft: string,
    _dstBridge: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  destTxFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  executeMessage(
    arg0: string,
    srcChid: BigNumberish,
    _message: BytesLike,
    arg3: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeMessageWithTransfer(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeMessageWithTransferFallback(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeMessageWithTransferRefund(
    _token: string,
    _amount: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  messageBus(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setMessageBus(
    _messageBus: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTxFee(
    chid: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  totalFee(_dstChid: BigNumberish, _nft: string, _id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      _nft: string,
      _id: BigNumberish,
      _dstChid: BigNumberish,
      _receiver: string,
      _dstNft: string,
      _dstBridge: string,
      _backToOrigin: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimFee(overrides?: CallOverrides): Promise<void>;

    deposit(
      _nft: string,
      _id: BigNumberish,
      _dstChid: BigNumberish,
      _receiver: string,
      _dstNft: string,
      _dstBridge: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    destTxFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    executeMessage(
      arg0: string,
      srcChid: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<number>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<number>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<number>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<number>;

    messageBus(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setMessageBus(_messageBus: string, overrides?: CallOverrides): Promise<void>;

    setTxFee(chid: BigNumberish, fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalFee(_dstChid: BigNumberish, _nft: string, _id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "MessageBusUpdated(address)"(messageBus?: null): MessageBusUpdatedEventFilter;
    MessageBusUpdated(messageBus?: null): MessageBusUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    "Received(address,address,uint256,uint64)"(
      receiver?: null,
      nft?: null,
      id?: null,
      srcChid?: null,
    ): ReceivedEventFilter;
    Received(receiver?: null, nft?: null, id?: null, srcChid?: null): ReceivedEventFilter;

    "Sent(address,address,uint256,uint64,address,address)"(
      sender?: null,
      srcNft?: null,
      id?: null,
      dstChid?: null,
      receiver?: null,
      dstNft?: null,
    ): SentEventFilter;
    Sent(sender?: null, srcNft?: null, id?: null, dstChid?: null, receiver?: null, dstNft?: null): SentEventFilter;
  };

  estimateGas: {
    burn(
      _nft: string,
      _id: BigNumberish,
      _dstChid: BigNumberish,
      _receiver: string,
      _dstNft: string,
      _dstBridge: string,
      _backToOrigin: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    deposit(
      _nft: string,
      _id: BigNumberish,
      _dstChid: BigNumberish,
      _receiver: string,
      _dstNft: string,
      _dstBridge: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    destTxFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    executeMessage(
      arg0: string,
      srcChid: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    messageBus(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setMessageBus(_messageBus: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setTxFee(
      chid: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    totalFee(_dstChid: BigNumberish, _nft: string, _id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      _nft: string,
      _id: BigNumberish,
      _dstChid: BigNumberish,
      _receiver: string,
      _dstNft: string,
      _dstBridge: string,
      _backToOrigin: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    deposit(
      _nft: string,
      _id: BigNumberish,
      _dstChid: BigNumberish,
      _receiver: string,
      _dstNft: string,
      _dstBridge: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    destTxFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMessage(
      arg0: string,
      srcChid: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    messageBus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTxFee(
      chid: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalFee(
      _dstChid: BigNumberish,
      _nft: string,
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
