/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GovernInterface extends utils.Interface {
  contractName: "Govern";
  functions: {
    "celerToken()": FunctionFragment;
    "collectForfeiture()": FunctionFragment;
    "collector()": FunctionFragment;
    "confirmParamProposal(uint256)": FunctionFragment;
    "createParamProposal(uint8,uint256)": FunctionFragment;
    "forfeiture()": FunctionFragment;
    "getParamProposalVote(uint256,address)": FunctionFragment;
    "nextParamProposalId()": FunctionFragment;
    "paramProposals(uint256)": FunctionFragment;
    "staking()": FunctionFragment;
    "voteParam(uint256,uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "celerToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "collectForfeiture", values?: undefined): string;
  encodeFunctionData(functionFragment: "collector", values?: undefined): string;
  encodeFunctionData(functionFragment: "confirmParamProposal", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "createParamProposal", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "forfeiture", values?: undefined): string;
  encodeFunctionData(functionFragment: "getParamProposalVote", values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: "nextParamProposalId", values?: undefined): string;
  encodeFunctionData(functionFragment: "paramProposals", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "voteParam", values: [BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: "celerToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collectForfeiture", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collector", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confirmParamProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createParamProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forfeiture", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getParamProposalVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextParamProposalId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paramProposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteParam", data: BytesLike): Result;

  events: {
    "ConfirmParamProposal(uint256,bool,uint8,uint256)": EventFragment;
    "CreateParamProposal(uint256,address,uint256,uint256,uint8,uint256)": EventFragment;
    "VoteParam(uint256,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfirmParamProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateParamProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteParam"): EventFragment;
}

export type ConfirmParamProposalEvent = TypedEvent<
  [BigNumber, boolean, number, BigNumber],
  { proposalId: BigNumber; passed: boolean; name: number; newValue: BigNumber }
>;

export type ConfirmParamProposalEventFilter = TypedEventFilter<ConfirmParamProposalEvent>;

export type CreateParamProposalEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, number, BigNumber],
  {
    proposalId: BigNumber;
    proposer: string;
    deposit: BigNumber;
    voteDeadline: BigNumber;
    name: number;
    newValue: BigNumber;
  }
>;

export type CreateParamProposalEventFilter = TypedEventFilter<CreateParamProposalEvent>;

export type VoteParamEvent = TypedEvent<
  [BigNumber, string, number],
  { proposalId: BigNumber; voter: string; vote: number }
>;

export type VoteParamEventFilter = TypedEventFilter<VoteParamEvent>;

export interface Govern extends BaseContract {
  contractName: "Govern";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    celerToken(overrides?: CallOverrides): Promise<[string]>;

    collectForfeiture(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    collector(overrides?: CallOverrides): Promise<[string]>;

    confirmParamProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    createParamProposal(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    forfeiture(overrides?: CallOverrides): Promise<[BigNumber]>;

    getParamProposalVote(_proposalId: BigNumberish, _voter: string, overrides?: CallOverrides): Promise<[number]>;

    nextParamProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    paramProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, number, BigNumber, number] & {
        proposer: string;
        deposit: BigNumber;
        voteDeadline: BigNumber;
        name: number;
        newValue: BigNumber;
        status: number;
      }
    >;

    staking(overrides?: CallOverrides): Promise<[string]>;

    voteParam(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  celerToken(overrides?: CallOverrides): Promise<string>;

  collectForfeiture(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  collector(overrides?: CallOverrides): Promise<string>;

  confirmParamProposal(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  createParamProposal(
    _name: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  forfeiture(overrides?: CallOverrides): Promise<BigNumber>;

  getParamProposalVote(_proposalId: BigNumberish, _voter: string, overrides?: CallOverrides): Promise<number>;

  nextParamProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  paramProposals(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, number, BigNumber, number] & {
      proposer: string;
      deposit: BigNumber;
      voteDeadline: BigNumber;
      name: number;
      newValue: BigNumber;
      status: number;
    }
  >;

  staking(overrides?: CallOverrides): Promise<string>;

  voteParam(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    celerToken(overrides?: CallOverrides): Promise<string>;

    collectForfeiture(overrides?: CallOverrides): Promise<void>;

    collector(overrides?: CallOverrides): Promise<string>;

    confirmParamProposal(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createParamProposal(_name: BigNumberish, _value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    forfeiture(overrides?: CallOverrides): Promise<BigNumber>;

    getParamProposalVote(_proposalId: BigNumberish, _voter: string, overrides?: CallOverrides): Promise<number>;

    nextParamProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    paramProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, number, BigNumber, number] & {
        proposer: string;
        deposit: BigNumber;
        voteDeadline: BigNumber;
        name: number;
        newValue: BigNumber;
        status: number;
      }
    >;

    staking(overrides?: CallOverrides): Promise<string>;

    voteParam(_proposalId: BigNumberish, _vote: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ConfirmParamProposal(uint256,bool,uint8,uint256)"(
      proposalId?: null,
      passed?: null,
      name?: null,
      newValue?: null,
    ): ConfirmParamProposalEventFilter;
    ConfirmParamProposal(
      proposalId?: null,
      passed?: null,
      name?: null,
      newValue?: null,
    ): ConfirmParamProposalEventFilter;

    "CreateParamProposal(uint256,address,uint256,uint256,uint8,uint256)"(
      proposalId?: null,
      proposer?: null,
      deposit?: null,
      voteDeadline?: null,
      name?: null,
      newValue?: null,
    ): CreateParamProposalEventFilter;
    CreateParamProposal(
      proposalId?: null,
      proposer?: null,
      deposit?: null,
      voteDeadline?: null,
      name?: null,
      newValue?: null,
    ): CreateParamProposalEventFilter;

    "VoteParam(uint256,address,uint8)"(proposalId?: null, voter?: null, vote?: null): VoteParamEventFilter;
    VoteParam(proposalId?: null, voter?: null, vote?: null): VoteParamEventFilter;
  };

  estimateGas: {
    celerToken(overrides?: CallOverrides): Promise<BigNumber>;

    collectForfeiture(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    collector(overrides?: CallOverrides): Promise<BigNumber>;

    confirmParamProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    createParamProposal(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    forfeiture(overrides?: CallOverrides): Promise<BigNumber>;

    getParamProposalVote(_proposalId: BigNumberish, _voter: string, overrides?: CallOverrides): Promise<BigNumber>;

    nextParamProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    paramProposals(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    voteParam(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    celerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectForfeiture(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    collector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmParamProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    createParamProposal(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    forfeiture(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParamProposalVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    nextParamProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramProposals(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteParam(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
