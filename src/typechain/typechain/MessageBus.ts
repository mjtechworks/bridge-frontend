/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace MsgDataTypes {
  export type RouteInfoStruct = {
    sender: string;
    receiver: string;
    srcChainId: BigNumberish;
    srcTxHash: BytesLike;
  };

  export type RouteInfoStructOutput = [string, string, BigNumber, string] & {
    sender: string;
    receiver: string;
    srcChainId: BigNumber;
    srcTxHash: string;
  };

  export type TransferInfoStruct = {
    t: BigNumberish;
    sender: string;
    receiver: string;
    token: string;
    amount: BigNumberish;
    wdseq: BigNumberish;
    srcChainId: BigNumberish;
    refId: BytesLike;
    srcTxHash: BytesLike;
  };

  export type TransferInfoStructOutput = [
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
  ] & {
    t: number;
    sender: string;
    receiver: string;
    token: string;
    amount: BigNumber;
    wdseq: BigNumber;
    srcChainId: BigNumber;
    refId: string;
    srcTxHash: string;
  };

  export type BridgeTransferParamsStruct = {
    request: BytesLike;
    sigs: BytesLike[];
    signers: string[];
    powers: BigNumberish[];
  };

  export type BridgeTransferParamsStructOutput = [string, string[], string[], BigNumber[]] & {
    request: string;
    sigs: string[];
    signers: string[];
    powers: BigNumber[];
  };

  export type MsgWithTransferExecutionParamsStruct = {
    message: BytesLike;
    transfer: MsgDataTypes.TransferInfoStruct;
    sigs: BytesLike[];
    signers: string[];
    powers: BigNumberish[];
  };

  export type MsgWithTransferExecutionParamsStructOutput = [
    string,
    MsgDataTypes.TransferInfoStructOutput,
    string[],
    string[],
    BigNumber[],
  ] & {
    message: string;
    transfer: MsgDataTypes.TransferInfoStructOutput;
    sigs: string[];
    signers: string[];
    powers: BigNumber[];
  };
}

export interface MessageBusInterface extends utils.Interface {
  contractName: "MessageBus";
  functions: {
    "calcFee(bytes)": FunctionFragment;
    "executeMessage(bytes,(address,address,uint64,bytes32),bytes[],address[],uint256[])": FunctionFragment;
    "executeMessageWithTransfer(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32,bytes32),bytes[],address[],uint256[])": FunctionFragment;
    "executeMessageWithTransferRefund(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32,bytes32),bytes[],address[],uint256[])": FunctionFragment;
    "executedMessages(bytes32)": FunctionFragment;
    "feeBase()": FunctionFragment;
    "feePerByte()": FunctionFragment;
    "init(address,address,address,address,address)": FunctionFragment;
    "liquidityBridge()": FunctionFragment;
    "owner()": FunctionFragment;
    "pegBridge()": FunctionFragment;
    "pegBridgeV2()": FunctionFragment;
    "pegVault()": FunctionFragment;
    "pegVaultV2()": FunctionFragment;
    "preExecuteMessageGasUsage()": FunctionFragment;
    "refundAndExecuteMsg((bytes,bytes[],address[],uint256[]),(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32,bytes32),bytes[],address[],uint256[]))": FunctionFragment;
    "sendMessage(address,uint256,bytes)": FunctionFragment;
    "sendMessageWithTransfer(address,uint256,address,bytes32,bytes)": FunctionFragment;
    "setFeeBase(uint256)": FunctionFragment;
    "setFeePerByte(uint256)": FunctionFragment;
    "setLiquidityBridge(address)": FunctionFragment;
    "setPegBridge(address)": FunctionFragment;
    "setPegBridgeV2(address)": FunctionFragment;
    "setPegVault(address)": FunctionFragment;
    "setPegVaultV2(address)": FunctionFragment;
    "setPreExecuteMessageGasUsage(uint256)": FunctionFragment;
    "sigsVerifier()": FunctionFragment;
    "transferAndExecuteMsg((bytes,bytes[],address[],uint256[]),(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32,bytes32),bytes[],address[],uint256[]))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFee(address,uint256,bytes[],address[],uint256[])": FunctionFragment;
    "withdrawnFees(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "calcFee", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "executeMessage",
    values: [BytesLike, MsgDataTypes.RouteInfoStruct, BytesLike[], string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransfer",
    values: [BytesLike, MsgDataTypes.TransferInfoStruct, BytesLike[], string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferRefund",
    values: [BytesLike, MsgDataTypes.TransferInfoStruct, BytesLike[], string[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: "executedMessages", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "feeBase", values?: undefined): string;
  encodeFunctionData(functionFragment: "feePerByte", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string, string, string, string, string]): string;
  encodeFunctionData(functionFragment: "liquidityBridge", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pegBridge", values?: undefined): string;
  encodeFunctionData(functionFragment: "pegBridgeV2", values?: undefined): string;
  encodeFunctionData(functionFragment: "pegVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "pegVaultV2", values?: undefined): string;
  encodeFunctionData(functionFragment: "preExecuteMessageGasUsage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundAndExecuteMsg",
    values: [MsgDataTypes.BridgeTransferParamsStruct, MsgDataTypes.MsgWithTransferExecutionParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: "sendMessage", values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(
    functionFragment: "sendMessageWithTransfer",
    values: [string, BigNumberish, string, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "setFeeBase", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setFeePerByte", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setLiquidityBridge", values: [string]): string;
  encodeFunctionData(functionFragment: "setPegBridge", values: [string]): string;
  encodeFunctionData(functionFragment: "setPegBridgeV2", values: [string]): string;
  encodeFunctionData(functionFragment: "setPegVault", values: [string]): string;
  encodeFunctionData(functionFragment: "setPegVaultV2", values: [string]): string;
  encodeFunctionData(functionFragment: "setPreExecuteMessageGasUsage", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "sigsVerifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAndExecuteMsg",
    values: [MsgDataTypes.BridgeTransferParamsStruct, MsgDataTypes.MsgWithTransferExecutionParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [string, BigNumberish, BytesLike[], string[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: "withdrawnFees", values: [string]): string;

  decodeFunctionResult(functionFragment: "calcFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeMessageWithTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeMessageWithTransferRefund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executedMessages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePerByte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegBridgeV2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegVaultV2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preExecuteMessageGasUsage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundAndExecuteMsg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendMessageWithTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeePerByte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLiquidityBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPegBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPegBridgeV2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPegVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPegVaultV2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPreExecuteMessageGasUsage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sigsVerifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferAndExecuteMsg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawnFees", data: BytesLike): Result;

  events: {
    "CallReverted(string)": EventFragment;
    "Executed(uint8,bytes32,uint8,address,uint64,bytes32)": EventFragment;
    "FeeBaseUpdated(uint256)": EventFragment;
    "FeePerByteUpdated(uint256)": EventFragment;
    "LiquidityBridgeUpdated(address)": EventFragment;
    "Message(address,address,uint256,bytes,uint256)": EventFragment;
    "MessageWithTransfer(address,address,uint256,address,bytes32,bytes,uint256)": EventFragment;
    "NeedRetry(uint8,bytes32,uint64,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PegBridgeUpdated(address)": EventFragment;
    "PegBridgeV2Updated(address)": EventFragment;
    "PegVaultUpdated(address)": EventFragment;
    "PegVaultV2Updated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeBaseUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePerByteUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityBridgeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Message"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageWithTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NeedRetry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PegBridgeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PegBridgeV2Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PegVaultUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PegVaultV2Updated"): EventFragment;
}

export type CallRevertedEvent = TypedEvent<[string], { reason: string }>;

export type CallRevertedEventFilter = TypedEventFilter<CallRevertedEvent>;

export type ExecutedEvent = TypedEvent<
  [number, string, number, string, BigNumber, string],
  {
    msgType: number;
    msgId: string;
    status: number;
    receiver: string;
    srcChainId: BigNumber;
    srcTxHash: string;
  }
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export type FeeBaseUpdatedEvent = TypedEvent<[BigNumber], { feeBase: BigNumber }>;

export type FeeBaseUpdatedEventFilter = TypedEventFilter<FeeBaseUpdatedEvent>;

export type FeePerByteUpdatedEvent = TypedEvent<[BigNumber], { feePerByte: BigNumber }>;

export type FeePerByteUpdatedEventFilter = TypedEventFilter<FeePerByteUpdatedEvent>;

export type LiquidityBridgeUpdatedEvent = TypedEvent<[string], { liquidityBridge: string }>;

export type LiquidityBridgeUpdatedEventFilter = TypedEventFilter<LiquidityBridgeUpdatedEvent>;

export type MessageEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  {
    sender: string;
    receiver: string;
    dstChainId: BigNumber;
    message: string;
    fee: BigNumber;
  }
>;

export type MessageEventFilter = TypedEventFilter<MessageEvent>;

export type MessageWithTransferEvent = TypedEvent<
  [string, string, BigNumber, string, string, string, BigNumber],
  {
    sender: string;
    receiver: string;
    dstChainId: BigNumber;
    bridge: string;
    srcTransferId: string;
    message: string;
    fee: BigNumber;
  }
>;

export type MessageWithTransferEventFilter = TypedEventFilter<MessageWithTransferEvent>;

export type NeedRetryEvent = TypedEvent<
  [number, string, BigNumber, string],
  { msgType: number; msgId: string; srcChainId: BigNumber; srcTxHash: string }
>;

export type NeedRetryEventFilter = TypedEventFilter<NeedRetryEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type PegBridgeUpdatedEvent = TypedEvent<[string], { pegBridge: string }>;

export type PegBridgeUpdatedEventFilter = TypedEventFilter<PegBridgeUpdatedEvent>;

export type PegBridgeV2UpdatedEvent = TypedEvent<[string], { pegBridgeV2: string }>;

export type PegBridgeV2UpdatedEventFilter = TypedEventFilter<PegBridgeV2UpdatedEvent>;

export type PegVaultUpdatedEvent = TypedEvent<[string], { pegVault: string }>;

export type PegVaultUpdatedEventFilter = TypedEventFilter<PegVaultUpdatedEvent>;

export type PegVaultV2UpdatedEvent = TypedEvent<[string], { pegVaultV2: string }>;

export type PegVaultV2UpdatedEventFilter = TypedEventFilter<PegVaultV2UpdatedEvent>;

export interface MessageBus extends BaseContract {
  contractName: "MessageBus";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MessageBusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    executeMessage(
      _message: BytesLike,
      _route: MsgDataTypes.RouteInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeMessageWithTransfer(
      _message: BytesLike,
      _transfer: MsgDataTypes.TransferInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeMessageWithTransferRefund(
      _message: BytesLike,
      _transfer: MsgDataTypes.TransferInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    feeBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePerByte(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      _liquidityBridge: string,
      _pegBridge: string,
      _pegVault: string,
      _pegBridgeV2: string,
      _pegVaultV2: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    liquidityBridge(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pegBridge(overrides?: CallOverrides): Promise<[string]>;

    pegBridgeV2(overrides?: CallOverrides): Promise<[string]>;

    pegVault(overrides?: CallOverrides): Promise<[string]>;

    pegVaultV2(overrides?: CallOverrides): Promise<[string]>;

    preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundAndExecuteMsg(
      _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
      _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _srcBridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLiquidityBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPegBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPegBridgeV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPegVault(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPegVaultV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sigsVerifier(overrides?: CallOverrides): Promise<[string]>;

    transferAndExecuteMsg(
      _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
      _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  executeMessage(
    _message: BytesLike,
    _route: MsgDataTypes.RouteInfoStruct,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeMessageWithTransfer(
    _message: BytesLike,
    _transfer: MsgDataTypes.TransferInfoStruct,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeMessageWithTransferRefund(
    _message: BytesLike,
    _transfer: MsgDataTypes.TransferInfoStruct,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  feeBase(overrides?: CallOverrides): Promise<BigNumber>;

  feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _liquidityBridge: string,
    _pegBridge: string,
    _pegVault: string,
    _pegBridgeV2: string,
    _pegVaultV2: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  liquidityBridge(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pegBridge(overrides?: CallOverrides): Promise<string>;

  pegBridgeV2(overrides?: CallOverrides): Promise<string>;

  pegVault(overrides?: CallOverrides): Promise<string>;

  pegVaultV2(overrides?: CallOverrides): Promise<string>;

  preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<BigNumber>;

  refundAndExecuteMsg(
    _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
    _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sendMessage(
    _receiver: string,
    _dstChainId: BigNumberish,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sendMessageWithTransfer(
    _receiver: string,
    _dstChainId: BigNumberish,
    _srcBridge: string,
    _srcTransferId: BytesLike,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeBase(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeePerByte(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLiquidityBridge(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPegBridge(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPegBridgeV2(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPegVault(_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setPegVaultV2(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPreExecuteMessageGasUsage(
    _usage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sigsVerifier(overrides?: CallOverrides): Promise<string>;

  transferAndExecuteMsg(
    _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
    _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawFee(
    _account: string,
    _cumulativeFee: BigNumberish,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    executeMessage(
      _message: BytesLike,
      _route: MsgDataTypes.RouteInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    executeMessageWithTransfer(
      _message: BytesLike,
      _transfer: MsgDataTypes.TransferInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    executeMessageWithTransferRefund(
      _message: BytesLike,
      _transfer: MsgDataTypes.TransferInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    executedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _liquidityBridge: string,
      _pegBridge: string,
      _pegVault: string,
      _pegBridgeV2: string,
      _pegVaultV2: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidityBridge(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pegBridge(overrides?: CallOverrides): Promise<string>;

    pegBridgeV2(overrides?: CallOverrides): Promise<string>;

    pegVault(overrides?: CallOverrides): Promise<string>;

    pegVaultV2(overrides?: CallOverrides): Promise<string>;

    preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<BigNumber>;

    refundAndExecuteMsg(
      _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
      _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _srcBridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeBase(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeePerByte(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLiquidityBridge(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegBridge(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegBridgeV2(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegVault(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegVaultV2(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPreExecuteMessageGasUsage(_usage: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sigsVerifier(overrides?: CallOverrides): Promise<string>;

    transferAndExecuteMsg(
      _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
      _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CallReverted(string)"(reason?: null): CallRevertedEventFilter;
    CallReverted(reason?: null): CallRevertedEventFilter;

    "Executed(uint8,bytes32,uint8,address,uint64,bytes32)"(
      msgType?: null,
      msgId?: null,
      status?: null,
      receiver?: string | null,
      srcChainId?: null,
      srcTxHash?: null,
    ): ExecutedEventFilter;
    Executed(
      msgType?: null,
      msgId?: null,
      status?: null,
      receiver?: string | null,
      srcChainId?: null,
      srcTxHash?: null,
    ): ExecutedEventFilter;

    "FeeBaseUpdated(uint256)"(feeBase?: null): FeeBaseUpdatedEventFilter;
    FeeBaseUpdated(feeBase?: null): FeeBaseUpdatedEventFilter;

    "FeePerByteUpdated(uint256)"(feePerByte?: null): FeePerByteUpdatedEventFilter;
    FeePerByteUpdated(feePerByte?: null): FeePerByteUpdatedEventFilter;

    "LiquidityBridgeUpdated(address)"(liquidityBridge?: null): LiquidityBridgeUpdatedEventFilter;
    LiquidityBridgeUpdated(liquidityBridge?: null): LiquidityBridgeUpdatedEventFilter;

    "Message(address,address,uint256,bytes,uint256)"(
      sender?: string | null,
      receiver?: null,
      dstChainId?: null,
      message?: null,
      fee?: null,
    ): MessageEventFilter;
    Message(sender?: string | null, receiver?: null, dstChainId?: null, message?: null, fee?: null): MessageEventFilter;

    "MessageWithTransfer(address,address,uint256,address,bytes32,bytes,uint256)"(
      sender?: string | null,
      receiver?: null,
      dstChainId?: null,
      bridge?: null,
      srcTransferId?: null,
      message?: null,
      fee?: null,
    ): MessageWithTransferEventFilter;
    MessageWithTransfer(
      sender?: string | null,
      receiver?: null,
      dstChainId?: null,
      bridge?: null,
      srcTransferId?: null,
      message?: null,
      fee?: null,
    ): MessageWithTransferEventFilter;

    "NeedRetry(uint8,bytes32,uint64,bytes32)"(
      msgType?: null,
      msgId?: null,
      srcChainId?: null,
      srcTxHash?: null,
    ): NeedRetryEventFilter;
    NeedRetry(msgType?: null, msgId?: null, srcChainId?: null, srcTxHash?: null): NeedRetryEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    "PegBridgeUpdated(address)"(pegBridge?: null): PegBridgeUpdatedEventFilter;
    PegBridgeUpdated(pegBridge?: null): PegBridgeUpdatedEventFilter;

    "PegBridgeV2Updated(address)"(pegBridgeV2?: null): PegBridgeV2UpdatedEventFilter;
    PegBridgeV2Updated(pegBridgeV2?: null): PegBridgeV2UpdatedEventFilter;

    "PegVaultUpdated(address)"(pegVault?: null): PegVaultUpdatedEventFilter;
    PegVaultUpdated(pegVault?: null): PegVaultUpdatedEventFilter;

    "PegVaultV2Updated(address)"(pegVaultV2?: null): PegVaultV2UpdatedEventFilter;
    PegVaultV2Updated(pegVaultV2?: null): PegVaultV2UpdatedEventFilter;
  };

  estimateGas: {
    calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    executeMessage(
      _message: BytesLike,
      _route: MsgDataTypes.RouteInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeMessageWithTransfer(
      _message: BytesLike,
      _transfer: MsgDataTypes.TransferInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeMessageWithTransferRefund(
      _message: BytesLike,
      _transfer: MsgDataTypes.TransferInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _liquidityBridge: string,
      _pegBridge: string,
      _pegVault: string,
      _pegBridgeV2: string,
      _pegVaultV2: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    liquidityBridge(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pegBridge(overrides?: CallOverrides): Promise<BigNumber>;

    pegBridgeV2(overrides?: CallOverrides): Promise<BigNumber>;

    pegVault(overrides?: CallOverrides): Promise<BigNumber>;

    pegVaultV2(overrides?: CallOverrides): Promise<BigNumber>;

    preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<BigNumber>;

    refundAndExecuteMsg(
      _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
      _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _srcBridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeBase(_fee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setFeePerByte(_fee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setLiquidityBridge(_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPegBridge(_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPegBridgeV2(_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPegVault(_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPegVaultV2(_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sigsVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    transferAndExecuteMsg(
      _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
      _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calcFee(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMessage(
      _message: BytesLike,
      _route: MsgDataTypes.RouteInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransfer(
      _message: BytesLike,
      _transfer: MsgDataTypes.TransferInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferRefund(
      _message: BytesLike,
      _transfer: MsgDataTypes.TransferInfoStruct,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePerByte(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _liquidityBridge: string,
      _pegBridge: string,
      _pegVault: string,
      _pegBridgeV2: string,
      _pegVaultV2: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    liquidityBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegBridgeV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegVaultV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundAndExecuteMsg(
      _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
      _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _srcBridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidityBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPegBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPegBridgeV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPegVault(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPegVaultV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sigsVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAndExecuteMsg(
      _transferParams: MsgDataTypes.BridgeTransferParamsStruct,
      _msgParams: MsgDataTypes.MsgWithTransferExecutionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
