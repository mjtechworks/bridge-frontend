/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IncentiveEventsRewardNewInterface extends ethers.utils.Interface {
  functions: {
    "claimDeadlines(uint256)": FunctionFragment;
    "claimReward(address,uint256,address[],uint256[],bytes)": FunctionFragment;
    "claimedRewardAmounts(uint256,address,address)": FunctionFragment;
    "contributeToRewardPool(address,uint256)": FunctionFragment;
    "drainToken(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardSigner()": FunctionFragment;
    "setClaimDeadline(uint256,uint256)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimDeadlines", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, BigNumberish, string[], BigNumberish[], BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "claimedRewardAmounts", values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: "contributeToRewardPool", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "drainToken", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "rewardSigner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setClaimDeadline", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claimDeadlines", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedRewardAmounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contributeToRewardPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drainToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setClaimDeadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "IncentiveRewardClaimed(address,address,uint256)": EventFragment;
    "IncentiveRewardContributed(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncentiveRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveRewardContributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type IncentiveRewardClaimedEvent = TypedEvent<
  [string, string, BigNumber] & {
    recipient: string;
    token: string;
    reward: BigNumber;
  }
>;

export type IncentiveRewardContributedEvent = TypedEvent<
  [string, string, BigNumber] & {
    contributor: string;
    token: string;
    contribution: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class IncentiveEventsRewardNew extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IncentiveEventsRewardNewInterface;

  functions: {
    claimDeadlines(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimReward(
      _recipient: string,
      _eventId: BigNumberish,
      _tokens: string[],
      _rewardAmounts: BigNumberish[],
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimedRewardAmounts(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    contributeToRewardPool(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    drainToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardSigner(overrides?: CallOverrides): Promise<[string]>;

    setClaimDeadline(
      _eventId: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  claimDeadlines(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  claimReward(
    _recipient: string,
    _eventId: BigNumberish,
    _tokens: string[],
    _rewardAmounts: BigNumberish[],
    _sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimedRewardAmounts(arg0: BigNumberish, arg1: string, arg2: string, overrides?: CallOverrides): Promise<BigNumber>;

  contributeToRewardPool(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  drainToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  rewardSigner(overrides?: CallOverrides): Promise<string>;

  setClaimDeadline(
    _eventId: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSigner(_signer: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    claimDeadlines(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _recipient: string,
      _eventId: BigNumberish,
      _tokens: string[],
      _rewardAmounts: BigNumberish[],
      _sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimedRewardAmounts(arg0: BigNumberish, arg1: string, arg2: string, overrides?: CallOverrides): Promise<BigNumber>;

    contributeToRewardPool(_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    drainToken(_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardSigner(overrides?: CallOverrides): Promise<string>;

    setClaimDeadline(_eventId: BigNumberish, _deadline: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "IncentiveRewardClaimed(address,address,uint256)"(
      recipient?: string | null,
      token?: string | null,
      reward?: null,
    ): TypedEventFilter<[string, string, BigNumber], { recipient: string; token: string; reward: BigNumber }>;

    IncentiveRewardClaimed(
      recipient?: string | null,
      token?: string | null,
      reward?: null,
    ): TypedEventFilter<[string, string, BigNumber], { recipient: string; token: string; reward: BigNumber }>;

    "IncentiveRewardContributed(address,address,uint256)"(
      contributor?: string | null,
      token?: string | null,
      contribution?: null,
    ): TypedEventFilter<[string, string, BigNumber], { contributor: string; token: string; contribution: BigNumber }>;

    IncentiveRewardContributed(
      contributor?: string | null,
      token?: string | null,
      contribution?: null,
    ): TypedEventFilter<[string, string, BigNumber], { contributor: string; token: string; contribution: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    "Paused(address)"(account?: null): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    claimDeadlines(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _recipient: string,
      _eventId: BigNumberish,
      _tokens: string[],
      _rewardAmounts: BigNumberish[],
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimedRewardAmounts(arg0: BigNumberish, arg1: string, arg2: string, overrides?: CallOverrides): Promise<BigNumber>;

    contributeToRewardPool(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    drainToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    rewardSigner(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimDeadline(
      _eventId: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSigner(_signer: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    claimDeadlines(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      _recipient: string,
      _eventId: BigNumberish,
      _tokens: string[],
      _rewardAmounts: BigNumberish[],
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimedRewardAmounts(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    contributeToRewardPool(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    drainToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    rewardSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimDeadline(
      _eventId: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
